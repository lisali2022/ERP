@page "/dingtalk"
@inject HttpClient Http

<PageTitle>DingTalk API Request</PageTitle>

<h3>DingTalk API Request Example</h3>
<p>@responseMessage</p>

@code {
    private string responseMessage = "Loading...";
    private string accessToken;

    protected override async Task OnInitializedAsync()
    {
        // Step 1: 获取访问令牌
        accessToken = await GetDingTalkAccessTokenAsync();

        if (!string.IsNullOrEmpty(accessToken))
        {
            // Step 2: 使用访问令牌发送钉钉API请求
            var response = await SendDingTalkApiRequestAsync(accessToken);

            // Step 3: 处理响应
            responseMessage = response.IsSuccessStatusCode ? "Success!" : "Failed: " + response.ReasonPhrase;
        }
        else
        {
            responseMessage = "Failed to get access token.";
        }
    }

    private async Task<string> GetDingTalkAccessTokenAsync()
    {
        var appId = "dingk1ijv6gjwuupzpft"; // 替换为你的AppKey
        var appSecret = "X_PIpWffCW1O7QmfaeLduwf2tdWVCrYRX93AUwYshzj9yez0bbeZQZEawtsyLOF8"; // 替换为你的AppSecret   
        var response = await Http.GetAsync("https://oapi.dingtalk.com/gettoken?appkey=" + appId + "&appsecret=" + appSecret);
        response.EnsureSuccessStatusCode();
        var responseBody = await response.Content.ReadAsStringAsync();
        // 这里需要解析responseBody来获取access_token，具体取决于钉钉API的返回格式
        // 假设返回的是一个JSON对象，你可以使用System.Text.Json来反序列化它
        // 下面是一个简化的示例，你需要根据实际情况进行调整
        // var tokenResponse = System.Text.Json.JsonSerializer.Deserialize<TokenResponse>(responseBody);
        // return tokenResponse?.access_token;

        // 由于这是一个示例，我们直接返回一个假设的access_token
        return "fake-access-token"; // 替换为实际的access_token
    }

    private async Task<HttpResponseMessage> SendDingTalkApiRequestAsync(string accessToken)
    {
        // 构造钉钉API的URL和请求体（这里只是一个示例，你需要根据实际情况进行调整）
        var apiUrl = $"https://oapi.dingtalk.com/topapi/v2/message/corpconversation/asyncsend_v2?access_token={accessToken}";
        // ... 构造请求体（如果需要的话）

        // 发送请求（这里假设是一个POST请求，你可能需要根据实际情况调整为GET或其他方法）
        // 注意：这里我们没有包含请求体，因为示例API可能不需要它。你需要根据实际的API要求来构造请求。
        var response = await Http.PostAsync(apiUrl, null); // 如果需要请求体，请使用FormUrlEncodedContent或其他合适的内容类型

        return response;
    }

    // 假设的TokenResponse类（你需要根据实际的钉钉API返回结果来定义这个类）
    // private class TokenResponse
    // {
    //     public string access_token { get; set; }
    //     // 其他可能的属性...
    // }
}